//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DLLRemoteDemoTestHarness.DLLRemoteServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DLLRemoteServiceReference.IWebService")]
    public interface IWebService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetRegisteredDLLs", ReplyAction="http://tempuri.org/IWebService/GetRegisteredDLLsResponse")]
        string[] GetRegisteredDLLs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetDLLFunctions", ReplyAction="http://tempuri.org/IWebService/GetDLLFunctionsResponse")]
        string[] GetDLLFunctions(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetLibraryInformation", ReplyAction="http://tempuri.org/IWebService/GetLibraryInformationResponse")]
        CommonTypes.Library GetLibraryInformation(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/ExecuteMethod", ReplyAction="http://tempuri.org/IWebService/ExecuteMethodResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonTypes.Parameter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonTypes.Method))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonTypes.Parameter[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonTypes.Library))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonTypes.Method[]))]
        string ExecuteMethod(string path, string method, object[] parameters);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWebServiceChannel : DLLRemoteDemoTestHarness.DLLRemoteServiceReference.IWebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebServiceClient : System.ServiceModel.ClientBase<DLLRemoteDemoTestHarness.DLLRemoteServiceReference.IWebService>, DLLRemoteDemoTestHarness.DLLRemoteServiceReference.IWebService {
        
        public WebServiceClient() {
        }
        
        public WebServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetRegisteredDLLs() {
            return base.Channel.GetRegisteredDLLs();
        }
        
        public string[] GetDLLFunctions(string path) {
            return base.Channel.GetDLLFunctions(path);
        }
        
        public CommonTypes.Library GetLibraryInformation(string path) {
            return base.Channel.GetLibraryInformation(path);
        }
        
        public string ExecuteMethod(string path, string method, object[] parameters) {
            return base.Channel.ExecuteMethod(path, method, parameters);
        }
    }
}
